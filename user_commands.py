import asyncio
import re
from datetime import datetime
from typing import List, Optional

import bleach
from aiolimiter import AsyncLimiter
from cachetools import TTLCache
from telegram import Update
from telegram.error import TelegramError
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PollAnswerHandler,
    filters,
)

from achievements import ACHIEVEMENTS
from config import get_config
from database import Database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏–º–∏—Ç–µ—Ä–æ–≤
import structlog

logger = structlog.get_logger()
command_limiter = AsyncLimiter(10, 60)  # 10 –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É
message_limiter = AsyncLimiter(30, 60)  # 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å TTL (5 –º–∏–Ω—É—Ç)
user_cache = TTLCache(maxsize=1000, ttl=300)
poll_cache = TTLCache(maxsize=100, ttl=300)

def validate_nickname(nick: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∏–∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.

    Args:
        nick: –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        bool: True, –µ—Å–ª–∏ –Ω–∏–∫ –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    pattern = r'^[\w\s-]{1,50}$'
    return bool(re.match(pattern, nick))

async def validate_user(db: Database, user_id: int, chat_id: int) -> Optional[dict]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ.

    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        chat_id: ID —á–∞—Ç–∞.

    Returns:
        Optional[dict]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.
    """
    user = await db.get_user(user_id)
    if not user or user['exit_time']:
        logger.warning(
            "User validation failed: user not found or inactive",
            user_id=user_id,
            chat_id=chat_id
        )
        return None
    return user

class UserManagementCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""

    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Start command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "start", user_id)
            user = await db.get_user(user_id)
            if user and not user['exit_time']:
                await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ!")
                return
            nick = update.effective_user.username or f"User{user_id}"
            async with db.get_connection() as conn:
                await conn.execute(
                    '''
                    INSERT OR REPLACE INTO users (
                        user_id, nick, role, join_time, exit_time
                    )
                    VALUES (?, ?, ?, ?, NULL)
                    ''',
                    (user_id, nick, 'user', datetime.utcnow().isoformat())
                )
                await conn.commit()
            user_cache[user_id] = {
                'user_id': user_id,
                'nick': nick,
                'role': 'user',
                'join_time': datetime.utcnow().isoformat(),
                'exit_time': None,
            }
            await db.add_achievement(user_id, 'welcome')
            await update.message.reply_text(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}! –¢—ã –≤ —á–∞—Ç–µ."
            )

    @staticmethod
    async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Stop command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "stop", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET exit_time = ? WHERE user_id = ?',
                    (datetime.utcnow().isoformat(), user_id)
                )
                await conn.commit()
            user['exit_time'] = datetime.utcnow().isoformat()
            user_cache[user_id] = user
            await update.message.reply_text(
                f"üëã {user['nick']}, —Ç—ã –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç."
            )

    @staticmethod
    async def nick(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Nick command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "nick", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if user['frozen_nick']:
                await update.message.reply_text("‚ùå –¢–≤–æ–π –Ω–∏–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –Ω–∏–∫: /nick <–Ω–æ–≤—ã–π_–Ω–∏–∫>"
                )
                return
            new_nick = bleach.clean(' '.join(context.args), tags=[], attributes={})
            if not validate_nickname(new_nick):
                await update.message.reply_text(
                    "‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ "
                    "–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã!"
                )
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET nick = ? WHERE user_id = ?',
                    (new_nick, user_id)
                )
                await conn.commit()
            user['nick'] = new_nick
            user_cache[user_id] = user
            await update.message.reply_text(
                f"‚úÖ –¢–≤–æ–π –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_nick}!"
            )

class MessagingCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""

    @staticmethod
    async def last(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Last command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "last", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    '''
                    SELECT m.message_id, m.user_id, u.nick, m.content, m.timestamp
                    FROM messages m
                    JOIN users u ON m.user_id = u.user_id
                    WHERE m.is_private = 0
                    ORDER BY m.timestamp DESC
                    LIMIT 10
                    '''
                )
                messages = await cursor.fetchall()
            if not messages:
                await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ!")
                return
            lines = [
                f"[{row[4]}] {row[2]}: {row[3]}" for row in messages
            ]
            await update.message.reply_text("\n".join(lines))

    @staticmethod
    async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "List users command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "list_users", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id, nick FROM users WHERE exit_time IS NULL'
                )
                users = await cursor.fetchall()
            if not users:
                await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                return
            lines = [f"#{row[0]}: {row[1]}" for row in users]
            await update.message.reply_text("\n".join(lines))

    @staticmethod
    async def msg(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Msg command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "msg", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: /msg <ID> <—Ç–µ–∫—Å—Ç>"
                )
                return
            try:
                target_user_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            content = bleach.clean(' '.join(context.args[1:]), tags=[], attributes={})
            if len(content) > 1000:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
                return
            target_user = await db.get_user(target_user_id)
            if not target_user or target_user['exit_time']:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    '''
                    INSERT INTO messages (
                        user_id, target_user_id, content, is_private, timestamp
                    )
                    VALUES (?, ?, ?, 1, ?)
                    ''',
                    (
                        user_id,
                        target_user_id,
                        content,
                        datetime.utcnow().isoformat()
                    )
                )
                await conn.commit()
            async with message_limiter:
                try:
                    await context.bot.send_message(
                        target_user_id,
                        f"üì© –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user['nick']}: {content}"
                    )
                except TelegramError as e:
                    logger.error(
                        "Failed to send private message",
                        target_user_id=target_user_id,
                        error=str(e)
                    )
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{target_user_id}!"
            )

    @staticmethod
    async def getmsg(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Getmsg command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "getmsg", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    '''
                    SELECT m.message_id, u.nick, m.content, m.timestamp
                    FROM messages m
                    JOIN users u ON m.user_id = u.user_id
                    WHERE m.target_user_id = ? AND m.is_private = 1
                    ORDER BY m.timestamp DESC
                    LIMIT 10
                    ''',
                    (user_id,)
                )
                messages = await cursor.fetchall()
            if not messages:
                await update.message.reply_text("üì≠ –ù–µ—Ç –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
                return
            lines = [
                f"[{row[3]}] {row[1]}: {row[2]}" for row in messages
            ]
            await update.message.reply_text("\n".join(lines))

class PollCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏."""

    @staticmethod
    async def poll(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Poll command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "poll", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã: /poll <–≤–æ–ø—Ä–æ—Å> <–≤–∞—Ä–∏–∞–Ω—Ç1> <–≤–∞—Ä–∏–∞–Ω—Ç2> ..."
                )
                return
            question = bleach.clean(context.args[0], tags=[], attributes={})
            options = [
                bleach.clean(opt, tags=[], attributes={})
                for opt in context.args[1:][:10]
            ]
            if len(question) > 255 or any(len(opt) > 100 for opt in options):
                await update.message.reply_text(
                    "‚ùå –í–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ!"
                )
                return
            if len(options) < 2:
                await update.message.reply_text(
                    "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!"
                )
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    '''
                    INSERT INTO polls (
                        user_id, question, options, start_time
                    )
                    VALUES (?, ?, ?, ?)
                    ''',
                    (
                        user_id,
                        question,
                        ','.join(options),
                        datetime.utcnow().isoformat()
                    )
                )
                poll_id = cursor.lastrowid
                await conn.commit()
            poll_cache[poll_id] = {
                'user_id': user_id,
                'question': question,
                'options': options,
                'start_time': datetime.utcnow().isoformat(),
            }
            await update.message.reply_text(
                f"üó≥ –û–ø—Ä–æ—Å #{poll_id} —Å–æ–∑–¥–∞–Ω: {question}\n"
                f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(options)}"
            )

    @staticmethod
    async def vote(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –æ–ø—Ä–æ—Å–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Vote command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "vote", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if len(context.args) != 2:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –æ–ø—Ä–æ—Å–∞ –∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: /vote <poll_id> <option>"
                )
                return
            try:
                poll_id = int(context.args[0])
                option_idx = int(context.args[1]) - 1
            except ValueError:
                await update.message.reply_text(
                    "‚ùå ID –æ–ø—Ä–æ—Å–∞ –∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!"
                )
                return
            poll = poll_cache.get(poll_id)
            if not poll:
                async with db.get_connection() as conn:
                    cursor = await conn.execute(
                        'SELECT user_id, question, options, end_time FROM polls '
                        'WHERE id = ?',
                        (poll_id,)
                    )
                    poll_data = await cursor.fetchone()
                if not poll_data or poll_data[3]:
                    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω!")
                    return
                poll = {
                    'user_id': poll_data[0],
                    'question': poll_data[1],
                    'options': poll_data[2].split(','),
                    'end_time': poll_data[3],
                }
                poll_cache[poll_id] = poll
            if option_idx < 0 or option_idx >= len(poll['options']):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞!")
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id FROM poll_votes WHERE poll_id = ? AND user_id = ?',
                    (poll_id, user_id)
                )
                if await cursor.fetchone():
                    await update.message.reply_text("‚ùå –¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ!")
                    return
                await conn.execute(
                    '''
                    INSERT INTO poll_votes (poll_id, user_id, option_index)
                    VALUES (?, ?, ?)
                    ''',
                    (poll_id, user_id, option_idx)
                )
                await conn.commit()
            await update.message.reply_text(
                f"‚úÖ –ì–æ–ª–æ—Å —É—á—Ç—ë–Ω –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç '{poll['options'][option_idx]}' "
                f"–≤ –æ–ø—Ä–æ—Å–µ #{poll_id}!"
            )

    @staticmethod
    async def polldown(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Polldown command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "polldown", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –æ–ø—Ä–æ—Å–∞: /polldown <poll_id>"
                )
                return
            try:
                poll_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå ID –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            poll = poll_cache.get(poll_id)
            if not poll:
                async with db.get_connection() as conn:
                    cursor = await conn.execute(
                        'SELECT user_id, question, options, end_time FROM polls '
                        'WHERE id = ?',
                        (poll_id,)
                    )
                    poll_data = await cursor.fetchone()
                if not poll_data:
                    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                poll = {
                    'user_id': poll_data[0],
                    'question': poll_data[1],
                    'options': poll_data[2].split(','),
                    'end_time': poll_data[3],
                }
                poll_cache[poll_id] = poll
            if poll['end_time']:
                await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω!")
                return
            if poll['user_id'] != user_id and user['role'] not in ['moderator', 'admin', 'owner']:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å!"
                )
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE polls SET end_time = ? WHERE id = ?',
                    (datetime.utcnow().isoformat(), poll_id)
                )
                cursor = await conn.execute(
                    '''
                    SELECT option_index, COUNT(*) as votes
                    FROM poll_votes
                    WHERE poll_id = ?
                    GROUP BY option_index
                    ''',
                    (poll_id,)
                )
                votes = await cursor.fetchall()
                await conn.commit()
            results = [0] * len(poll['options'])
            for vote in votes:
                results[vote[0]] = vote[1]
            lines = [
                f"üó≥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ #{poll_id}: {poll['question']}",
                *[f"{i+1}. {opt}: {votes} –≥–æ–ª–æ—Å–æ–≤" for i, (opt, votes) in enumerate(zip(poll['options'], results))],
            ]
            await update.message.reply_text("\n".join(lines))
            if poll_id in poll_cache:
                del poll_cache[poll_id]

    @staticmethod
    async def handle_poll_vote(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ Telegram-–æ–ø—Ä–æ—Å–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        user_id = update.poll_answer.user.id
        chat_id = update.effective_chat.id if update.effective_chat else 0
        poll_id = update.poll_answer.poll_id
        option_idx = update.poll_answer.option_ids[0] if update.poll_answer.option_ids else None
        logger.info(
            "Poll vote received",
            user_id=user_id,
            chat_id=chat_id,
            poll_id=poll_id
        )
        await db.log_action(user_id, "poll_vote", user_id)
        if option_idx is None:
            return
        async with db.get_connection() as conn:
            cursor = await conn.execute(
                'SELECT user_id FROM poll_votes WHERE poll_id = ? AND user_id = ?',
                (poll_id, user_id)
            )
            if await cursor.fetchone():
                return
            await conn.execute(
                '''
                INSERT INTO poll_votes (poll_id, user_id, option_index)
                VALUES (?, ?, ?)
                ''',
                (poll_id, user_id, option_idx)
            )
            await conn.commit()

class InteractionCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @staticmethod
    async def hug(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–∏–º–∞—à–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Hug command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "hug", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /hug <ID>"
                )
                return
            try:
                target_user_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            target_user = await db.get_user(target_user_id)
            if not target_user or target_user['exit_time']:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            await update.message.reply_text(
                f"ü§ó {user['nick']} –æ–±–Ω—è–ª {target_user['nick']}!"
            )

    @staticmethod
    async def slap(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–ª–µ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Slap command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "slap", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /slap <ID>"
                )
                return
            try:
                target_user_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            target_user = await db.get_user(target_user_id)
            if not target_user or target_user['exit_time']:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT slap_text FROM settings WHERE user_id = ?',
                    (user_id,)
                )
                slap_text = (await cursor.fetchone())[0] if await cursor.fetchone() else "—à–ª—ë–ø!"
            await update.message.reply_text(
                f"üëã {user['nick']} {slap_text} {target_user['nick']}!"
            )

class InfoCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

    @staticmethod
    async def info(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Info command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "info", user_id)
            target_user_id = user_id
            if context.args:
                try:
                    target_user_id = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                    return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            achievements = (
                target_user['achievements'].split(',')
                if target_user['achievements']
                else []
            )
            ach_lines = [
                f"- {ACHIEVEMENTS[ach_id]['title']}: {ACHIEVEMENTS[ach_id]['desc']}"
                for ach_id in achievements if ach_id in ACHIEVEMENTS
            ]
            lines = [
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {target_user['nick']}:",
                f"ID: {target_user['user_id']}",
                f"–†–æ–ª—å: {target_user['role']}",
                f"–î–∞—Ç–∞ –≤—Ö–æ–¥–∞: {target_user['join_time']}",
                f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({len(achievements)}):",
                *ach_lines or ["- –ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"],
            ]
            await update.message.reply_text("\n".join(lines))

    @staticmethod
    async def search(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Search command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "search", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: /search <—Å–ª–æ–≤–æ>"
                )
                return
            keyword = bleach.clean(' '.join(context.args), tags=[], attributes={})
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    '''
                    SELECT m.message_id, u.nick, m.content, m.timestamp
                    FROM messages m
                    JOIN users u ON m.user_id = u.user_id
                    WHERE m.content LIKE ? AND m.is_private = 0
                    ORDER BY m.timestamp DESC
                    LIMIT 5
                    ''',
                    (f'%{keyword}%',)
                )
                messages = await cursor.fetchall()
            if not messages:
                await update.message.reply_text("üì≠ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return
            lines = [
                f"[{row[3]}] {row[1]}: {row[2]}" for row in messages
            ]
            await update.message.reply_text("\n".join(lines))

    @staticmethod
    async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Ping command initiated",
                user_id=user_id,
                "chat_id=chat_id
            )

            await db.log_action(user_id, "ping", user_id)
            await update.message.reply_text("Pong! üèì")

    @staticmethod
    async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Rules command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "rules", user_id)
            config = get_config()
            await update.message.reply_text(config['rules_text'])

    @staticmethod
    async def about(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "About command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "about", user_id)
            config = get_config()
            await update.message.reply_text(config['about_text'])

class SpecialMessageCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    @staticmethod
    async def third_person(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Third person command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "third_person", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if user['text_only']:
                await update.message.reply_text("‚ùå –£ —Ç–µ–±—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏–µ: /me <–¥–µ–π—Å—Ç–≤–∏–µ>"
                )
                return
            content = bleach.clean(' '.join(context.args), tags=[]), attributes={}
            if len(content) > 500:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
                return
            await update.message.reply_text(f"üåü {user['nick']} {content}")

    @staticmethod
    async def hidden_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Hidden message command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "hidden_message", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if user['text_only']:
                await update.message.reply_text("‚ùå –£ —Ç–µ–±—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç: /hide <—Ç–µ–∫—Å—Ç>"
                )
                return
            content = bleach.clean(' '.join(context.args), tags=['spoiler'], attributes={})
            if len(content) > 500:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
                return
            await update.message.reply_text(f"üôà ||{content}||", parse_mode="MarkdownV2")

    @staticmethod
    async def protected_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Protected message command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "protected_message", user_id)
            user = await validate_user(db, user_id, chat_id)
            if not user:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if user['text_only']:
                await update.message.reply_text("‚ùå –£ —Ç–µ–±—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç: /protect <—Ç–µ–∫—Å—Ç>"
                )
                return
            content = bleach.clean(' '.join(context.args), tags=['code'], attributes={})
            if len(content) > 500:
                await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
                return
            await update.message.reply_text(f"```text\n{content}\n```", parse_mode="MarkdownV2")

def register_handlers(db: Database) -> List[Handler]:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        List[Handler]: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    handlers = [
        CommandHandler("start", lambda u, c: UserManagementCommands.start(u, c, db)),
        CommandHandler("stop", lambda u, c: UserManagementCommands.stop(u, c, db)),
        CommandHandler("nick", lambda u, c: UserManagementCommands.nick(u, c, db)),
        CommandHandler("last", lambda u, c: MessagingCommands.last(u, c, db)),
        CommandHandler("list", lambda u, c: MessagingCommands.list_users(u, c, db)),
        CommandHandler("msg", lambda u, c: MessagingCommands.msg(u, c, db)),
        CommandHandler("getmsg", lambda u, c: MessagingCommands.getmsg(u, c, db)),
        CommandHandler("poll", lambda u, c: PollCommands.poll(u, c, db)),
        CommandHandler("vote", lambda u, c: PollCommands.vote(u, c, db)),
        CommandHandler("polldown", lambda u, c: PollCommands.polldown(u, c, db)),
        CommandHandler("hug", lambda u, c: InteractionCommands.hug(u, c, db)),
        CommandHandler("slap", lambda u, c: InteractionCommands.slap(u, c, db)),
        CommandHandler("info", lambda u, c: InfoCommands.info(u, c, db)),
        CommandHandler("search", lambda u, c: InfoCommands.search(u, c, db)),
        CommandHandler("ping", lambda u, c: InfoCommands.ping(u, c, db)),
        CommandHandler("rules", lambda u, c: InfoCommands.rules(u, c, db)),
        CommandHandler("about", lambda u, c: InfoCommands.about(u, c, db)),
        CommandHandler("me", lambda u, c: SpecialMessageCommands.third_person(u, c, db)),
        CommandHandler("hide", lambda u, c: SpecialMessageCommands.hidden_message(u, c, db)),
        CommandHandler(
            "protect", lambda u, c: SpecialMessageCommands.protected_message(u, c, db)
        ),
        PollAnswerHandler(
            lambda u, c: PollCommands.handle_poll_vote(u, c, db)
        ),
    ]
    return handlers