import asyncio
import re
from datetime import datetime, timedelta
from typing import List, Optional

import bleach
from aiolimiter import AsyncLimiter
from cachetools import TTLCache
from telegram import Update
from telegram.error import TelegramError
from telegram.ext import CommandHandler, ContextTypes

from achievements import ACHIEVEMENTS
from config import get_config
from database import Database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏–º–∏—Ç–µ—Ä–æ–≤
import structlog

logger = structlog.get_logger()
command_limiter = AsyncLimiter(10, 60)  # 10 –∫–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É
message_limiter = AsyncLimiter(30, 60)  # 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å TTL (5 –º–∏–Ω—É—Ç)
user_cache = TTLCache(maxsize=1000, ttl=300)

def validate_nickname(nick: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∏–∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.

    Args:
        nick: –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        bool: True, –µ—Å–ª–∏ –Ω–∏–∫ –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    pattern = r'^[\w\s-]{1,50}$'
    return bool(re.match(pattern, nick))

async def check_moderator(db: Database, user_id: int, chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤—ã—à–µ.

    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        chat_id: ID —á–∞—Ç–∞.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤—ã—à–µ, –∏–Ω–∞—á–µ False.
    """
    user = await db.get_user(user_id)
    if not user:
        logger.warning(
            "Moderator check failed: user not found",
            user_id=user_id,
            chat_id=chat_id
        )
        return False
    is_moderator = user['role'] in ['moderator', 'admin', 'owner']
    logger.debug(
        "Moderator check",
        user_id=user_id,
        chat_id=chat_id,
        result=is_moderator
    )
    return is_moderator

async def get_target_user_id(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.

    Returns:
        Optional[int]: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
    """
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return None
    try:
        return int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return None

class NotificationCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    @staticmethod
    async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Notify command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "notify", user_id)
            user = await db.get_user(user_id)
            if not user or user['exit_time']:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: /notify <—Ç–µ–∫—Å—Ç>"
                )
                return
            text = bleach.clean(' '.join(context.args), tags=[], attributes={})
            if len(text) > 1000:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id FROM users WHERE exit_time IS NULL'
                )
                users = await cursor.fetchall()
                for (recipient_id,) in users:
                    async with message_limiter:
                        try:
                            await context.bot.send_message(
                                recipient_id, f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}"
                            )
                        except TelegramError as e:
                            logger.error(
                                "Failed to notify user",
                                user_id=recipient_id,
                                error=str(e)
                            )
                await db.log_action(
                    0, "notify", user_id, details=f"Text: {text[:50]}..."
                )
            await update.message.reply_text(
                "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
            )

class UserModerationCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @staticmethod
    async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ú—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Mute command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "mute", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if target_user['role'] in ['moderator', 'admin', 'owner']:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –º—É—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –≤—ã—à–µ!"
                )
                return
            duration = 60
            if len(context.args) > 1:
                try:
                    duration = int(context.args[1])
                    if duration <= 0 or duration > 1440:
                        raise ValueError
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç!"
                    )
                    return
            mute_end_time = datetime.utcnow() + timedelta(minutes=duration)
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET mute_time = ? WHERE user_id = ?',
                    (mute_end_time.isoformat(), target_user_id)
                )
                await conn.commit()
            target_user['mute_time'] = mute_end_time.isoformat()
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "mute",
                user_id,
                details=f"Duration: {duration} minutes"
            )
            await update.message.reply_text(
                f"üî∂ {target_user['nick']} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç!"
            )

    @staticmethod
    async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Ban command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "ban", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if target_user['role'] in ['moderator', 'admin', 'owner']:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –≤—ã—à–µ!"
                )
                return
            duration = 1440
            if len(context.args) > 1:
                try:
                    duration = int(context.args[1])
                    if duration <= 0 or duration > 10080:
                        raise ValueError
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10080 –º–∏–Ω—É—Ç!"
                    )
                    return
            ban_end_time = datetime.utcnow() + timedelta(minutes=duration)
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET banned = 1, ban_time = ?, exit_time = ? '
                    'WHERE user_id = ?',
                    (
                        ban_end_time.isoformat(),
                        datetime.utcnow().isoformat(),
                        target_user_id
                    )
                )
                await conn.commit()
            target_user['banned'] = 1
            target_user['ban_time'] = ban_end_time.isoformat()
            target_user['exit_time'] = datetime.utcnow().isoformat()
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "ban",
                user_id,
                details=f"Duration: {duration} minutes"
            )
            await update.message.reply_text(
                f"üî¥ {target_user['nick']} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç!"
            )

    @staticmethod
    async def rename(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Rename command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "rename", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –Ω–∏–∫: /rename <ID> <–Ω–æ–≤—ã–π_–Ω–∏–∫>"
                )
                return
            new_nick = bleach.clean(' '.join(context.args[1:]), tags=[], attributes={})
            if not validate_nickname(new_nick):
                await update.message.reply_text(
                    "‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ "
                    "–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã!"
                )
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET nick = ? WHERE user_id = ?',
                    (new_nick, target_user_id)
                )
                await conn.commit()
            target_user['nick'] = new_nick
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "rename",
                user_id,
                details=f"New nick: {new_nick}"
            )
            await update.message.reply_text(
                f"‚úÖ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{target_user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_nick}"
            )

    @staticmethod
    async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Kick command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "kick", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if target_user['role'] in ['moderator', 'admin', 'owner']:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –≤—ã—à–µ!"
                )
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET exit_time = ? WHERE user_id = ?',
                    (datetime.utcnow().isoformat(), target_user_id)
                )
                await conn.commit()
            target_user['exit_time'] = datetime.utcnow().isoformat()
            user_cache[target_user_id] = target_user
            await db.log_action(target_user_id, "kick", user_id)
            await update.message.reply_text(
                f"üö™ {target_user['nick']} –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞!"
            )

    @staticmethod
    async def resident(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Resident command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "resident", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if target_user['role'] != 'user':
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫!")
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET role = ? WHERE user_id = ?',
                    ('resident', target_user_id)
                )
                await conn.commit()
            target_user['role'] = 'resident'
            user_cache[target_user_id] = target_user
            await db.log_action(target_user_id, "resident", user_id)
            await update.message.reply_text(
                f"üè° {target_user['nick']} —Ç–µ–ø–µ—Ä—å —Ä–µ–∑–∏–¥–µ–Ω—Ç!"
            )

    @staticmethod
    async def freeze(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –∏–ª–∏ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Freeze command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "freeze", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            new_state = 0 if target_user['frozen_nick'] else 1
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET frozen_nick = ? WHERE user_id = ?',
                    (new_state, target_user_id)
                )
                await conn.commit()
            target_user['frozen_nick'] = new_state
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "freeze",
                user_id,
                details=f"State: {'frozen' if new_state else 'unfrozen'}"
            )
            await update.message.reply_text(
                f"üßä –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{target_user_id} "
                f"{'–∑–∞–º–æ—Ä–æ–∂–µ–Ω' if new_state else '—Ä–∞–∑–º–æ—Ä–æ–∑–µ–Ω'}!"
            )

    @staticmethod
    async def textual(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Textual command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "textual", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            new_state = 0 if target_user['text_only'] else 1
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET text_only = ? WHERE user_id = ?',
                    (new_state, target_user_id)
                )
                await conn.commit()
            target_user['text_only'] = new_state
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "textual",
                user_id,
                details=f"State: {'text_only' if new_state else 'normal'}"
            )
            await update.message.reply_text(
                f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{target_user_id} "
                f"{'–æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–º' if new_state else '–æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'}!"
            )

    @staticmethod
    async def rm(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Rm command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "rm", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if target_user['role'] in ['moderator', 'admin', 'owner']:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –≤—ã—à–µ!"
                )
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'DELETE FROM users WHERE user_id = ?', (target_user_id,)
                )
                await conn.commit()
            if target_user_id in user_cache:
                del user_cache[target_user_id]
            await db.log_action(target_user_id, "rm", user_id)
            await update.message.reply_text(
                f"üóë –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{target_user_id} —É–¥–∞–ª–µ–Ω—ã!"
            )

    @staticmethod
    async def harakiri(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —É–π—Ç–∏ –≤ –æ—Ç—Å—Ç–∞–≤–∫—É.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Harakiri command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "harakiri", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            user = await db.get_user(user_id)
            if user['role'] == 'owner':
                await update.message.reply_text(
                    "‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç —É–π—Ç–∏ –≤ –æ—Ç—Å—Ç–∞–≤–∫—É!"
                )
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET role = ? WHERE user_id = ?',
                    ('resident', user_id)
                )
                await conn.commit()
            user['role'] = 'resident'
            user_cache[user_id] = user
            await update.message.reply_text(
                f"üôá {user['nick']} —É—à—ë–ª –≤ –æ—Ç—Å—Ç–∞–≤–∫—É —Å –ø–æ—Å—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!"
            )

    @staticmethod
    async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Unban command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "unban", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if not target_user['banned']:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!")
                return
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET banned = 0, ban_time = NULL, '
                    'exit_time = NULL WHERE user_id = ?',
                    (target_user_id,)
                )
                await conn.commit()
            target_user['banned'] = 0
            target_user['ban_time'] = None
            target_user['exit_time'] = None
            user_cache[target_user_id] = target_user
            await db.log_action(target_user_id, "unban", user_id)
            await update.message.reply_text(
                f"üü¢ {target_user['nick']} —Ä–∞–∑–±–∞–Ω–µ–Ω!"
            )

    @staticmethod
    async def say(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Say command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "say", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            if not context.args:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç: /say <—Ç–µ–∫—Å—Ç>")
                return
            text = bleach.clean(' '.join(context.args), tags=[], attributes={})
            if len(text) > 1000:
                await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")
                return
            await update.message.reply_text(text)
            await db.log_action(0, "say", user_id, details=f"Text: {text[:50]}...")

    @staticmethod
    async def vote_mute(
        update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database
    ):
        """–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            config = get_config()
            logger.info(
                "Vote mute command initiated",
                user_id"=user_id,
                "chat_id"=chat_id
            )
            await db.log_action(user_id, "vote_mute", user_id)
            user = await db.get_user(user_id)
            if not user or user['exit_time']:
                await update.message.reply_text("‚ùå –¢—ã –Ω–µ –≤ —á–∞—Ç–µ!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if target_user['role'] in ['moderator', 'admin', 'owner']:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –º—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –≤—ã—à–µ!"
                )
                return
            if user_id == target_user_id:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–π –º—É—Ç!")
                return
            await db.add_mute_vote(target_user_id, user_id)
            vote_count = await db.count_mute_votes(
                target_user_id, config['mute_vote_window']
            )
            await update.message.reply_text(
                f"üó≥ –ì–æ–ª–æ—Å –∑–∞ –º—É—Ç {target_user['nick']} —É—á—Ç—ë–Ω! "
                f"–¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞: {vote_count}/{config['mute_vote_threshold']}"
            )
            if vote_count >= config['mute_vote_threshold']:
                mute_end_time = datetime.utcnow() + timedelta(
                    minutes=config['mute_duration']
                )
                async with db.get_connection() as conn:
                    await conn.execute('
                    '''
                        UPDATE users SET mute_time = ? WHERE user_id = ?
                    ',
                    (mute_end_time.iso(), target_user_id)
                )

                await conn.commit()
                target_user['mute_time'] = mute_end_time.iso()
                user_cache[target_user_id] = target_user
                await db.log_action(
                    target_user_id,
                    "mute",
                    0,
                    details=f"Vote mute: {config['mute_duration']} minutes"
                )
                await update.message.reply_text(
                    f"üî∂ {target_user['nick']} "
                    f"–∑–∞–º—É—á–µ–Ω –Ω–∞ {config['mute_duration']} –º–∏–Ω—É—Ç –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é!"
                )

class AchievementCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @staticmethod
    async def addach(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Addach command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "addach", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: /addach <ID> <achievement_id>"
                )
                return
            ach_id = context.args[1]
            if ach_id not in ACHIEVEMENTS:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!")
                return
            achievements = (
                target_user['achievements'].split(',')
                if target_user['achievements']
                else []
            )
            if ach_id in achievements:
                await update.message.reply_text(
                    "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
                )
                return
            achievements.append(ach_id)
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET achievements = ? WHERE user_id = ?',
                    (','.join(achievements), target_user_id)
                )
                await conn.commit()
            target_user['achievements'] = ','.join(achievements)
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "addach",
                user_id,
                details=f"Achievement: {ach_id}"
            )
            await update.message.reply_text(
                f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{ACHIEVEMENTS[ach_id]['title']}' "
                f"–¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{target_user_id}"
            )

    @staticmethod
    async def rmach(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–£–¥–∞–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Rmach command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "rmach", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            target_user_id = await get_target_user_id(update, context)
            if not target_user_id:
                return
            target_user = await db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: /rmach <ID> <achievement_id>"
                )
                return
            ach_id = context.args[1]
            if ach_id not in ACHIEVEMENTS:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!")
                return
            achievements = (
                target_user['achievements'].split(',')
                if target_user['achievements']
                else []
            )
            if ach_id not in achievements:
                await update.message.reply_text(
                    "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
                )
                return
            achievements.remove(ach_id)
            async with db.get_connection() as conn:
                await conn.execute(
                    'UPDATE users SET achievements = ? WHERE user_id = ?',
                    (
                        ','.join(achievements) if achievements else None,
                        target_user_id
                    )
                )
                await conn.commit()
            target_user['achievements'] = (
                ','.join(achievements) if achievements else None
            )
            user_cache[target_user_id] = target_user
            await db.log_action(
                target_user_id,
                "rmach",
                user_id,
                details=f"Achievement: {ach_id}"
            )
            await update.message.reply_text(
                f"üóë –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{ACHIEVEMENTS[ach_id]['title']}' "
                f"—É–¥–∞–ª–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{target_user_id}"
            )

class PollCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏."""

    @staticmethod
    async def poll_kill(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–£–¥–∞–ª—è–µ—Ç –æ–ø—Ä–æ—Å.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Poll kill command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "poll_kill", user_id)
            if not await check_moderator(db, user_id, chat_id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
                return
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏ ID –æ–ø—Ä–æ—Å–∞: /poll_kill <poll_id>"
                )
                return
            try:
                poll_id = int(context.args[0])
            except ValueError:
                await update.message.reply_text(
                    "‚ùå ID –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!"
                )
                return
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT id FROM polls WHERE id = ?', (poll_id,)
                )
                poll = await cursor.fetchone()
                if not poll:
                    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                await conn.execute(
                    'UPDATE polls SET end_time = ? WHERE id = ?',
                    (datetime.utcnow().isoformat(), poll_id)
                )
                await conn.commit()
            await update.message.reply_text(f"üóëÔ∏è –û–ø—Ä–æ—Å #{poll_id} —É–¥–∞–ª—ë–Ω!")

class StatsCommands:
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞."""

    @staticmethod
    async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞.

        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
            db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        async with command_limiter:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            logger.info(
                "Stats command initiated",
                user_id=user_id,
                chat_id=chat_id
            )
            await db.log_action(user_id, "stats", user_id)
            stats = await db.get_chat_stats()
            lines = [
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:",
                f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['active_users']}",
                f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['banned_users']}",
                f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}",
                f"–õ–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_pms']}",
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: {stats['active_polls']}",
            ]
            await update.message.reply_text("\n".join(lines))

def register_handlers(db: Database) -> List[CommandHandler]:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        List[CommandHandler]: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥.
    """
    handlers = [
        CommandHandler("notify", lambda u, c: NotificationCommands.notify(u, c, db)),
        CommandHandler("poll_kill", lambda u, c: PollCommands.poll_kill(u, c, db)),
        CommandHandler("mute", lambda u, c: UserModerationCommands.mute(u, c, db)),
        CommandHandler("ban", lambda u, c: UserModerationCommands.ban(u, c, db)),
        CommandHandler("rename", lambda u, c: UserModerationCommands.rename(u, c, db)),
        CommandHandler("addach", lambda u, c: AchievementCommands.addach(u, c, db)),
        CommandHandler("rmach", lambda u, c: AchievementCommands.rmach(u, c, db)),
        CommandHandler("kick", lambda u, c: UserModerationCommands.kick(u, c, db)),
        CommandHandler("resident", lambda u, c: UserModerationCommands.resident(u, c, db)),
        CommandHandler("freeze", lambda u, c: UserModerationCommands.freeze(u, c, db)),
        CommandHandler("textual", lambda u, c: UserModerationCommands.textual(u, c, db)),
        CommandHandler("rm", lambda u, c: UserModerationCommands.rm(u, c, db)),
        CommandHandler(
            "harakiri", lambda u, c: UserModerationCommands.harakiri(u, c, db)
        ),
        CommandHandler("unban", lambda u, c: UserModerationCommands.unban(u, c, db)),
        CommandHandler("say", lambda u, c: UserModerationCommands.say(u, c, db)),
        CommandHandler(
            "vote_mute", lambda u, c: UserModerationCommands.vote_mute(u, c, db)
        ),
        CommandHandler("stats", lambda u, c: StatsCommands.stats(u, c, db)),
    ]
    return handlers