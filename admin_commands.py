"""–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —á–∞—Ç-–±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Ä–æ–ª—è–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞
–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—å—é 'admin'.
"""

import asyncio
from typing import List

import bleach
import structlog
from aiolimiter import AsyncLimiter
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    Handler,
)

from config import get_config
from database import Database

logger = structlog.get_logger()
limiter = AsyncLimiter(1, 1)  # 1 –∫–æ–º–∞–Ω–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def check_admin(update: Update, db: Database) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ False.
    """
    user_id = update.effective_user.id
    user = await db.get_user(user_id)
    if not user or user['role'] != 'admin':
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        logger.warning(
            "Admin command access denied",
            user_id=user_id,
            chat_id=update.effective_chat.id
        )
        return False
    return True

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id –∏–ª–∏ @username> <–ø—Ä–∏—á–∏–Ω–∞>
    –ü—Ä–∏–º–µ—Ä: /ban @username –°–ø–∞–º
    """
    async with limiter:
        db = context.bot_data['db']
        if not await check_admin(update, db):
            return

        args = context.args
        if len(args) < 2:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID/@username –∏ –ø—Ä–∏—á–∏–Ω—É. –ü—Ä–∏–º–µ—Ä: /ban @username –°–ø–∞–º"
            )
            return

        target = bleach.clean(args[0])
        reason = bleach.clean(' '.join(args[1:]))
        user_id = None

        if target.startswith('@'):
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–∏–∫ —É–Ω–∏–∫–∞–ª–µ–Ω)
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id FROM users WHERE nick = ?',
                    (target[1:],)
                )
                result = await cursor.fetchone()
                user_id = result['user_id'] if result else None
        else:
            try:
                user_id = int(target)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∏–º–µ–Ω–∏.")
                return

        if not user_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = await db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        if user['role'] == 'admin':
            await update.message.reply_text("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        async with db.get_connection() as conn:
            await conn.execute(
                '''
                UPDATE users
                SET banned = 1, ban_time = ?
                WHERE user_id = ?
                ''',
                (asyncio.get_event_loop().time(), user_id)
            )
            await conn.commit()

        await db.log_action(
            user_id=update.effective_user.id,
            action='ban',
            target_id=user_id,
            details=f"Reason: {reason}"
        )
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        logger.info(
            "User banned",
            admin_id=update.effective_user.id,
            target_id=user_id,
            reason=reason,
            chat_id=update.effective_chat.id
        )

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id –∏–ª–∏ @username>
    –ü—Ä–∏–º–µ—Ä: /unban @username
    """
    async with limiter:
        db = context.bot_data['db']
        if not await check_admin(update, db):
            return

        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID/@username. –ü—Ä–∏–º–µ—Ä: /unban @username"
            )
            return

        target = bleach.clean(args[0])
        user_id = None

        if target.startswith('@'):
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id FROM users WHERE nick = ?',
                    (target[1:],)
                )
                result = await cursor.fetchone()
                user_id = result['user_id'] if result else None
        else:
            try:
                user_id = int(target)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∏–º–µ–Ω–∏.")
                return

        if not user_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = await db.get_user(user_id)
        if not user or not user['banned']:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
            return

        async with db.get_connection() as conn:
            await conn.execute(
                'UPDATE users SET banned = 0, ban_time = NULL WHERE user_id = ?',
                (user_id,)
            )
            await conn.commit()

        await db.log_action(
            user_id=update.effective_user.id,
            action='unban',
            target_id=user_id,
            details="User unbanned"
        )
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        logger.info(
            "User unbanned",
            admin_id=update.effective_user.id,
            target_id=user_id,
            chat_id=update.effective_chat.id
        )

async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (admin, moderator, user).

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role <user_id –∏–ª–∏ @username> <—Ä–æ–ª—å>
    –ü—Ä–∏–º–µ—Ä: /set_role @username admin
    """
    async with limiter:
        db = context.bot_data['db']
        if not await check_admin(update, db):
            return

        args = context.args
        if len(args) != 2:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID/@username –∏ —Ä–æ–ª—å. –ü—Ä–∏–º–µ—Ä: /set_role @username admin"
            )
            return

        target = bleach.clean(args[0])
        role = bleach.clean(args[1]).lower()
        if role not in ['admin', 'moderator', 'user']:
            await update.message.reply_text(
                "‚ùå –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: admin, moderator –∏–ª–∏ user."
            )
            return

        user_id = None
        if target.startswith('@'):
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id FROM users WHERE nick = ?',
                    (target[1:],)
                )
                result = await cursor.fetchone()
                user_id = result['user_id'] if result else None
        else:
            try:
                user_id = int(target)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∏–º–µ–Ω–∏.")
                return

        if not user_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = await db.get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        async with db.get_connection() as conn:
            await conn.execute(
                'UPDATE users SET role = ? WHERE user_id = ?',
                (role, user_id)
            )
            await conn.commit()

        await db.log_action(
            user_id=update.effective_user.id,
            action='set_role',
            target_id=user_id,
            details=f"New role: {role}"
        )
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å {role}."
        )
        logger.info(
            "Role set",
            admin_id=update.effective_user.id,
            target_id=user_id,
            role=role,
            chat_id=update.effective_chat.id
        )

async def view_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view_logs <user_id –∏–ª–∏ @username> [–ª–∏–º–∏—Ç]
    –ü—Ä–∏–º–µ—Ä: /view_logs @username 5
    """
    async with limiter:
        db = context.bot_data['db']
        if not await check_admin(update, db):
            return

        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID/@username. –ü—Ä–∏–º–µ—Ä: /view_logs @username 5"
            )
            return

        target = bleach.clean(args[0])
        limit = 5
        if len(args) > 1:
            try:
                limit = int(args[1])
                if limit < 1 or limit > 20:
                    await update.message.reply_text("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 20.")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞.")
                return

        user_id = None
        if target.startswith('@'):
            async with db.get_connection() as conn:
                cursor = await conn.execute(
                    'SELECT user_id FROM users WHERE nick = ?',
                    (target[1:],)
                )
                result = await cursor.fetchone()
                user_id = result['user_id'] if result else None
        else:
            try:
                user_id = int(target)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∏–º–µ–Ω–∏.")
                return

        if not user_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        logs = await db.get_user_logs(user_id, limit)
        if not logs:
            await update.message.reply_text("üìú –õ–æ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        response = f"üìú –õ–æ–≥–∏ –¥–ª—è {target} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit}):\n\n"
        for log in logs:
            details = log['details'] or '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'
            response += (
                f"ID: {log['log_id']}\n"
                f"–î–µ–π—Å—Ç–≤–∏–µ: {log['action']}\n"
                f"–¶–µ–ª—å: {log['target_id']}\n"
                f"–î–µ—Ç–∞–ª–∏: {details}\n"
                f"–í—Ä–µ–º—è: {log['timestamp']}\n"
                f"---\n"
            )

        await update.message.reply_text(response[:4096])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        logger.info(
            "Logs viewed",
            admin_id=update.effective_user.id,
            target_id=user_id,
            limit=limit,
            chat_id=update.effective_chat.id
        )

async def set_mute_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_mute_duration <–º–∏–Ω—É—Ç—ã>
    –ü—Ä–∏–º–µ—Ä: /set_mute_duration 60
    """
    async with limiter:
        db = context.bot_data['db']
        if not await check_admin(update, db):
            return

        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /set_mute_duration 60"
            )
            return

        try:
            duration = int(args[0])
            if duration < 1:
                await update.message.reply_text("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ config.py –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        config = get_config()
        config['mute_duration'] = duration

        await db.log_action(
            user_id=update.effective_user.id,
            action='set_mute_duration',
            target_id=0,
            details=f"New mute duration: {duration} minutes"
        )
        await update.message.reply_text(
            f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {duration} –º–∏–Ω—É—Ç."
        )
        logger.info(
            "Mute duration set",
            admin_id=update.effective_user.id,
            duration=duration,
            chat_id=update.effective_chat.id
        )

async def register_handlers(app: Application, db: Database) -> List[Handler]:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram.
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Returns:
        List[Handler]: –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    """
    app.bot_data['db'] = db
    handlers = [
        CommandHandler('ban', ban_user),
        CommandHandler('unban', unban_user),
        CommandHandler('set_role', set_role),
        CommandHandler('view_logs', view_logs),
        CommandHandler('set_mute_duration', set_mute_duration),
    ]
    logger.info("Admin command handlers registered", count=len(handlers))
    return handlers